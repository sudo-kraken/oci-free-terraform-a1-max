---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "Execute OCI Pipeline"

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform OCI Pipeline"
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: "22"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: latest

      - name: Setup SSH Private Key
        run: |
          echo "${{ secrets.PKEY }}" > pkey.pem
          chmod 600 pkey.pem
          echo "TF_VAR_pkey_path=$(pwd)/pkey.pem" >> $GITHUB_ENV

      - name: Setup Terraform Vars
        run: |
          echo "TF_VAR_tenancy_ocid=${{ secrets.TENANCY_OCID }}" >> $GITHUB_ENV
          echo "TF_VAR_user_ocid=${{ secrets.USER_OCID }}" >> $GITHUB_ENV
          echo "TF_VAR_fp=${{ secrets.FP }}" >> $GITHUB_ENV
          echo "TF_VAR_ssh_pub_key=${{ secrets.SSH_PUB_KEY }}" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        id: apply
        continue-on-error: true
        run: terraform apply -auto-approve

      - name: Check Terraform Apply Outcome
        id: check
        run: echo "apply_failed=${{ steps.apply.outcome == 'failure' }}" >> $GITHUB_ENV

      - name: Terraform Destroy
        if: env.apply_failed == 'true'
        id: failure-handler
        run: |
          echo "Terraform Apply failed. Initiating cleanup..."
          terraform destroy -auto-approve
          echo "cleanup_done=true" >> $GITHUB_ENV
